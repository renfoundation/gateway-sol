{
  "address": "0xa3FA9A73D22618FfdF6958Ba6285FB3F565e1443",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGatewayRegistry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipient",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IGatewayRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02aaed46ec4fa42bf9999d6b3d08ef15d6ab6c44d441cb250525773dccf80872",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0x000091178c828a9788f83Ab733Ff48fC1DA5Ba15",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "1033816",
    "logsBloom": "0x
    "blockHash": "0x3bd561fbef22e43e9e6994eda4e17d110a247d39f06eb834a5a284dfe83c4900",
    "transactionHash": "0x02aaed46ec4fa42bf9999d6b3d08ef15d6ab6c44d441cb250525773dccf80872",
    "logs": [],
    "blockNumber": 16870026,
    "cumulativeGasUsed": "1578208",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf36666C230Fa12333579b9Bd6196CB634D6BC506"
  ],
  "solcInputHash": "9dfd975ef398dd4b1a44f92bf218726a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BasicBridge.sol\":\"BasicBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"src/BasicBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IGatewayRegistry} from \\\"./GatewayRegistry/interfaces/IGatewayRegistry.sol\\\";\\nimport {IMintGateway} from \\\"./Gateways/interfaces/IMintGateway.sol\\\";\\nimport {ILockGateway} from \\\"./Gateways/interfaces/ILockGateway.sol\\\";\\n\\ncontract BasicBridge is Context {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BasicBridge\\\";\\n\\n    IGatewayRegistry public registry;\\n\\n    constructor(IGatewayRegistry _registry) {\\n        registry = _registry;\\n    }\\n\\n    function mint(\\n        // Payload\\n        string calldata symbol,\\n        address recipient,\\n        // Required\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external {\\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\\n\\n        if (address(renAsset) == address(0x0) || address(mintGateway) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n\\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\\n        uint256 amountMinted = mintGateway.mint(payloadHash, amount, nHash, sig);\\n        renAsset.safeTransfer(recipient, amountMinted);\\n    }\\n\\n    function burn(\\n        string calldata symbol,\\n        string calldata recipient,\\n        uint256 amount\\n    ) external {\\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\\n\\n        if (address(renAsset) == address(0x0) || address(mintGateway) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n\\n        renAsset.safeTransferFrom(_msgSender(), address(this), amount);\\n        mintGateway.burn(recipient, amount);\\n    }\\n\\n    function lock(\\n        string calldata symbol,\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external {\\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\\n\\n        if (address(lockAsset) == address(0x0) || address(lockGateway) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n\\n        lockAsset.safeTransferFrom(_msgSender(), address(this), amount);\\n        lockAsset.safeIncreaseAllowance(address(lockGateway), amount);\\n        lockGateway.lock(recipientAddress, recipientChain, recipientPayload, amount);\\n    }\\n\\n    function release(\\n        // Payload\\n        string calldata symbol,\\n        address recipient,\\n        // Required\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external {\\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\\n\\n        if (address(lockAsset) == address(0x0) || address(lockGateway) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n\\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\\n        uint256 amountReleased = lockGateway.release(payloadHash, amount, nHash, sig);\\n        lockAsset.safeTransfer(recipient, amountReleased);\\n    }\\n}\\n\",\"keccak256\":\"0x4bff89f2fa94ba9307185d8c9c5265c6f755a622a8f5a475a2fe97bbb4712030\",\"license\":\"GPL-3.0\"},\"src/GatewayRegistry/interfaces/IGatewayRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IMintGateway} from \\\"../../Gateways/interfaces/IMintGateway.sol\\\";\\nimport {ILockGateway} from \\\"../../Gateways/interfaces/ILockGateway.sol\\\";\\n\\nabstract contract IGatewayRegistry {\\n    function signatureVerifier() external view virtual returns (address);\\n\\n    function chainId() external view virtual returns (uint256);\\n\\n    function chainName() external view virtual returns (string memory);\\n\\n    function getMintGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\\n\\n    function getLockGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\\n\\n    function getMintGatewayByToken(address token) external view virtual returns (IMintGateway);\\n\\n    function getMintGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (IMintGateway);\\n\\n    function getRenAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\\n\\n    function getLockGatewayByToken(address token) external view virtual returns (ILockGateway);\\n\\n    function getLockGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (ILockGateway);\\n\\n    function getLockAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0xf4848a4702cdf0d2a7538b2af9f20332da06fa1fd014752153045d28e808e969\",\"license\":\"GPL-3.0\"},\"src/Gateways/interfaces/ILockGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nabstract contract ILockGateway {\\n    event LogRelease(address indexed recipient, uint256 amount, bytes32 indexed sigHash, bytes32 indexed nHash);\\n    event LogLockToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed lockNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function lock(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function release(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x17cbd1b2fb1348f926d36d654b28d87ccf72d12192854a1069ed0a5a22c83e29\",\"license\":\"GPL-3.0\"},\"src/Gateways/interfaces/IMintGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nabstract contract IMintGateway {\\n    /// @dev For backwards compatiblity reasons, the sigHash is cast to a\\n    /// uint256.\\n    event LogMint(address indexed to, uint256 amount, uint256 indexed sigHash, bytes32 indexed nHash);\\n\\n    /// @dev Once `LogBurnToChain` is enabled on mainnet, LogBurn may be\\n    /// replaced by LogBurnToChain with empty payload and chain fields.\\n    /// @dev For backwards compatibility, `to` is bytes instead of a string.\\n    event LogBurn(\\n        bytes to,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        bytes indexed indexedTo\\n    );\\n    event LogBurnToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function mint(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n\\n    function burnWithPayload(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function burn(string calldata recipient, uint256 amount) external virtual returns (uint256);\\n\\n    function burn(bytes calldata recipient, uint256 amount) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1b62ed28ccd1be4caec60d67959a5024a71775f18a3f1839b3b6706081ba0a9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806377f61403146100675780637b1039991461007c57806380a3c633146100ac578063a3f4df7e146100bf578063bc7fac7d146100f6578063cc3107a014610109575b600080fd5b61007a610075366004610d25565b61011c565b005b60005461008f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007a6100ba366004610e89565b610367565b6100e96040518060400160405280600b81526020016a426173696342726964676560a81b81525081565b6040516100a3919061106f565b61007a610104366004610dbd565b61054c565b61007a610117366004610d25565b610743565b60008054604051633ce39d3d60e11b81526001600160a01b03909116906379c73a7a9061014f908b908b90600401610fba565b60206040518083038186803b15801561016757600080fd5b505afa15801561017b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019f9190610d08565b60008054604051637b5c884f60e01b815292935090916001600160a01b0390911690637b5c884f906101d7908c908c90600401610fba565b60206040518083038186803b1580156101ef57600080fd5b505afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190610d08565b90506001600160a01b038216158061024657506001600160a01b038116155b1561028d57888860405160200161025e929190610f5b565b60408051601f198184030181529082905262461bcd60e51b82526102849160040161106f565b60405180910390fd5b60008989896040516020016102a493929190610fce565b6040516020818303038152906040528051906020012090506000826001600160a01b031663159ab14d838a8a8a8a6040518663ffffffff1660e01b81526004016102f2959493929190610f94565b602060405180830381600087803b15801561030c57600080fd5b505af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103449190610efd565b905061035a6001600160a01b0385168a836108ea565b5050505050505050505050565b60008054604051633ce39d3d60e11b81526001600160a01b03909116906379c73a7a9061039a9089908990600401610fba565b60206040518083038186803b1580156103b257600080fd5b505afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190610d08565b60008054604051637b5c884f60e01b815292935090916001600160a01b0390911690637b5c884f90610422908a908a90600401610fba565b60206040518083038186803b15801561043a57600080fd5b505afa15801561044e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104729190610d08565b90506001600160a01b038216158061049157506001600160a01b038116155b156104a957868660405160200161025e929190610f5b565b6104c0335b6001600160a01b038416903086610952565b604051632d209cb360e21b81526001600160a01b0382169063b48272cc906104f09088908890889060040161104b565b602060405180830381600087803b15801561050a57600080fd5b505af115801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190610efd565b5050505050505050565b6000805460405163138f137760e31b81526001600160a01b0390911690639c789bb89061057f908d908d90600401610fba565b60206040518083038186803b15801561059757600080fd5b505afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf9190610d08565b60008054604051633922d13960e01b815292935090916001600160a01b0390911690633922d13990610607908e908e90600401610fba565b60206040518083038186803b15801561061f57600080fd5b505afa158015610633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106579190610d08565b90506001600160a01b038216158061067657506001600160a01b038116155b1561068e578a8a60405160200161025e929190610f5b565b610697336104ae565b6106ab6001600160a01b0383168285610990565b60405163654eca9960e11b81526001600160a01b0382169063ca9d9532906106e3908c908c908c908c908c908c908c90600401610ffa565b602060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190610efd565b505050505050505050505050565b6000805460405163138f137760e31b81526001600160a01b0390911690639c789bb890610776908b908b90600401610fba565b60206040518083038186803b15801561078e57600080fd5b505afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190610d08565b60008054604051633922d13960e01b815292935090916001600160a01b0390911690633922d139906107fe908c908c90600401610fba565b60206040518083038186803b15801561081657600080fd5b505afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e9190610d08565b90506001600160a01b038216158061086d57506001600160a01b038116155b1561088557888860405160200161025e929190610f5b565b600089898960405160200161089c93929190610fce565b6040516020818303038152906040528051906020012090506000826001600160a01b0316639cffc715838a8a8a8a6040518663ffffffff1660e01b81526004016102f2959493929190610f94565b6040516001600160a01b03831660248201526044810182905261094d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a51565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261098a9085906323b872dd60e01b90608401610916565b50505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190610efd565b610a1e91906110a2565b6040516001600160a01b03851660248201526044810182905290915061098a90859063095ea7b360e01b90606401610916565b6000610aa6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b239092919063ffffffff16565b80519091501561094d5780806020019051810190610ac49190610ce6565b61094d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610284565b6060610b328484600085610b3c565b90505b9392505050565b606082471015610b9d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610284565b843b610beb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610284565b600080866001600160a01b03168587604051610c079190610f3f565b60006040518083038185875af1925050503d8060008114610c44576040519150601f19603f3d011682016040523d82523d6000602084013e610c49565b606091505b5091509150610c59828286610c64565b979650505050505050565b60608315610c73575081610b35565b825115610c835782518084602001fd5b8160405162461bcd60e51b8152600401610284919061106f565b60008083601f840112610caf57600080fd5b50813567ffffffffffffffff811115610cc757600080fd5b602083019150836020828501011115610cdf57600080fd5b9250929050565b600060208284031215610cf857600080fd5b81518015158114610b3557600080fd5b600060208284031215610d1a57600080fd5b8151610b35816110f4565b600080600080600080600060a0888a031215610d4057600080fd5b873567ffffffffffffffff80821115610d5857600080fd5b610d648b838c01610c9d565b909950975060208a01359150610d79826110f4565b909550604089013594506060890135935060808901359080821115610d9d57600080fd5b50610daa8a828b01610c9d565b989b979a50959850939692959293505050565b600080600080600080600080600060a08a8c031215610ddb57600080fd5b893567ffffffffffffffff80821115610df357600080fd5b610dff8d838e01610c9d565b909b50995060208c0135915080821115610e1857600080fd5b610e248d838e01610c9d565b909950975060408c0135915080821115610e3d57600080fd5b610e498d838e01610c9d565b909750955060608c0135915080821115610e6257600080fd5b50610e6f8c828d01610c9d565b9a9d999c50979a9699959894979660800135949350505050565b600080600080600060608688031215610ea157600080fd5b853567ffffffffffffffff80821115610eb957600080fd5b610ec589838a01610c9d565b90975095506020880135915080821115610ede57600080fd5b50610eeb88828901610c9d565b96999598509660400135949350505050565b600060208284031215610f0f57600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008251610f518184602087016110c8565b9190910192915050565b7f42617369634272696467653a20756e6b6e6f776e20617373657420000000000081528183601b83013760009101601b01908152919050565b858152846020820152836040820152608060608201526000610c59608083018486610f16565b602081526000610b32602083018486610f16565b604081526000610fe2604083018587610f16565b905060018060a01b0383166020830152949350505050565b60808152600061100e60808301898b610f16565b828103602084015261102181888a610f16565b90508281036040840152611036818688610f16565b91505082606083015298975050505050505050565b60408152600061105f604083018587610f16565b9050826020830152949350505050565b602081526000825180602084015261108e8160408501602087016110c8565b601f01601f19169190910160400192915050565b600082198211156110c357634e487b7160e01b600052601160045260246000fd5b500190565b60005b838110156110e35781810151838201526020016110cb565b8381111561098a5750506000910152565b6001600160a01b038116811461110957600080fd5b5056fea2646970667358221220881866e1847022a0f66ea801cb854ac64806832c4b27857b9001e452b3ca9de564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8297,
        "contract": "src/BasicBridge.sol:BasicBridge",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IGatewayRegistry)10376"
      }
    ],
    "types": {
      "t_contract(IGatewayRegistry)10376": {
        "encoding": "inplace",
        "label": "contract IGatewayRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}